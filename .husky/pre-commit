#!/bin/bash

PKG_MGR=pnpm

# Colors
red='\033[1;31m'
blue='\033[1;34m'
green='\033[1;32m'
yellow='\033[1;33m'
cyan='\033[1;36m'
clear='\033[0m'

# Counters
PASSED=0
FAILED=0
WARNINGS=0

# Simple progress indicator
progress() {
  local pid=$1
  local label="$2"
  local chars="⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"
  local i=0
  
  while kill -0 $pid 2>/dev/null; do
    printf "\r${cyan}[${chars:$i:1}] ${label}...${clear}"
    i=$(((i+1) % 10))
    sleep 0.1
  done
}

# Run check with simple analysis
run_check() {
  local label="$1"
  local script="$2"
  local log="${script}.log"
  
  echo -e "${yellow}🔄 ${label}${clear}"
  
  # Run command and capture exit code
  ($PKG_MGR run $script > "$log" 2>&1) &
  local pid=$!
  progress $pid "$label"
  wait $pid
  local exit_code=$?
  
  printf "\r"
  
  if [ $exit_code -eq 0 ]; then
    # Check for actual issues in successful runs
    case "$script" in
      "lint")
        # Check for actual errors/warnings in ESLint output
        if grep -q "✔ No ESLint warnings or errors" "$log"; then
          echo -e "${green}✅ ${label} PASSED${clear}"
          ((PASSED++))
        elif grep -q "✖.*problem" "$log"; then
          local errors=$(grep -o "[0-9]\+ error" "$log" | grep -o "[0-9]\+" | head -1)
          local warns=$(grep -o "[0-9]\+ warning" "$log" | grep -o "[0-9]\+" | head -1)
          errors=${errors:-0}
          warns=${warns:-0}
          if [ "$errors" -gt 0 ]; then
            echo -e "${red}❌ ${label} FAILED${clear} (${errors} errors)"
            echo -e "${red}Output:${clear}"
            cat "$log" | sed 's/^/  /'
            ((FAILED++))
            return 1
          elif [ "$warns" -gt 0 ]; then
            echo -e "${green}✅ ${label} PASSED${clear} ${yellow}(${warns} warnings)${clear}"
            ((WARNINGS+=warns))
            ((PASSED++))
          fi
        else
          echo -e "${green}✅ ${label} PASSED${clear}"
          ((PASSED++))
        fi
        ;;
      "types")
        # Check for TypeScript errors
        if grep -q "error TS[0-9]" "$log"; then
          local errors=$(grep -c "error TS[0-9]" "$log")
          echo -e "${red}❌ ${label} FAILED${clear} (${errors} errors)"
          echo -e "${red}Output:${clear}"
          cat "$log" | sed 's/^/  /'
          ((FAILED++))
          return 1
        else
          echo -e "${green}✅ ${label} PASSED${clear}"
          ((PASSED++))
        fi
        ;;
      *)
        echo -e "${green}✅ ${label} PASSED${clear}"
        ((PASSED++))
        ;;
    esac
  else
    echo -e "${red}❌ ${label} FAILED${clear} (exit code: $exit_code)"
    echo -e "${red}Output:${clear}"
    cat "$log" | sed 's/^/  /'
    ((FAILED++))
    return 1
  fi
  
  rm -f "$log"
}

# Banner
# echo -e "${green}🚀 JuiceFuel Pre-commit Checks${clear}"
echo -e "
${blue}
    _      ____   _____   _       
   / \    |  _ \ | ____| | |      
  / _ \   | | | ||  _|   | |      
 / ___ \ _| |_| || |___ _| |___ _ 
/_/   \_(_)____(_)_____(_)_____(_)

${clear}
"
echo -e "${cyan}Using: ${PKG_MGR} | $(date)${clear}\n"

# Run checks
START=$(date +%s)

run_check "i18n Check" "i18n:check" || exit 1
run_check "TypeScript Check" "types" || exit 1  
run_check "ESLint Check" "lint" || exit 1

END=$(date +%s)
DURATION=$((END - START))

# Summary
echo -e "\n${cyan}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${clear}"
echo -e "${green}✅ ALL CHECKS PASSED!${clear} ${cyan}(${DURATION}s)${clear}"
if [ "$WARNINGS" -gt 0 ]; then
  echo -e "${yellow}⚠️  ${WARNINGS} warning(s) - consider addressing${clear}"
fi
echo -e "${green}🚀 Ready to commit!${clear}"